# example 2-1 - Container orchestration - docker-compose startup
# This is a clone of ex2-1.docker-compose.yml with some modification of services hosts and ports.
# The purpose is to demonstrate how to run multiple environment in local machine.
version: '3.2'
services:
  redis:
    image: redis:4-alpine
    ports:
    - 46379:6379
  postgres:
    image: postgres:10-alpine
    ports:
      - 45432:5432
    volumes:
      - rest_postgres_dbstore:/var/lib/postgresql/data
      - ./data/init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "docker-java"
  rest:
    image: maven:3.5-jdk-8-alpine
    ports:
      - 48080:8080
    depends_on:
      - redis
      - postgres
    working_dir: /src/app
    volumes:
      - .:/src/app
      - mvn_repo:/root/.m2
    entrypoint: mvn
    command: package exec:java -Dspring.datasource.url=jdbc:postgresql://qa_postgres_1:5432/docker-java -Dspring.redis.host=qa_redis_1
volumes:
  rest_postgres_dbstore:
  mvn_repo:
# docker-compose -f ex2-1.docker-compose.yml -p qa up -d redis
# docker-compose -f ex2-1.docker-compose.yml -p qa up -d postgres
# docker-compose -f ex2-1.docker-compose.yml -p qa up -d rest
